challenge one:


const numberVariable = 0;

numberVariable++;
numberVariable++;
numberVariable++;

console.log(numberVariable);


Ans: This code does not work because variabe is declared as constant and constant cannot be updated
---------------------------------------------------------------------------------------------
challenge two:

const firstNumber = 20;
const secondNumber = '20';

const result = firstNumber === secondNumber;

console.log(result);
-------------------------------------------
const firstNumber = 20;
const secondNumber = '20';

const result = firstNumber == secondNumber;

console.log(result);
 

Ans; The first approach matches if the data types are same as well as the value.
the second aproach only matches the values and i think the first approach is better as it matches all the data type

----------------------------------------------------------------------------------------------

challenge three:
const expression1 = 100 % 50;
const expression2 = 100 / 50;
const expression3 = expression1 < expression2;
const expression4 = expression3 && 300 + 5 === 305;
const expression5 = !expression4;

console.log(expression5);

answer: After evaluating the expression answer will be false
expression1= 0
expression 2=2
expression3= true
expression4 =true;
expression5= false
---------------------------------------------------------------------------------------------
challenge four;
 const myObj = {
  prop1: 'first value',
  prop2: 20
};

// Index         0   1   2
const myArray = [40, 50, 2];

const result = myObj.prop2 === (myArray[0] / myArray[2]);

answer: true
---------------------------------------------------------------------------------------------

challenge five:

const myObj = {
  nestedObject1: {
    price: 100,
    quantity: 5
  },
  nestedObject2: {
    price: 150,
    quantity: 2
  }
};

const myArray = [myObj.nestedObject1, myObj.nestedObject2];

const result = (myArray[0].price * myArray[0].quantity) > (myArray[1].price * myArray[1].quantity); 

answer: true.